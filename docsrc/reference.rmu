# Rimu Reference

Rimu is a readable-text to HTML markup language inspired by AsciiDoc
and Markdown.

At its core Rimu is a simple readable-text markup similar in scope to
Markdown, but with two additional areas of functionality (both built
into the Rimu markup syntax):

- Markup generation can be customized and extended.
- Rimu includes a simple, flexible macro language.
- A subset of Rimu syntax is [Markdown compatible]({tips}#markdown-compatible).
- The generated HTML is compatible with all modern browsers.
- [Rimu implementations](#rimu-implementations) are available for various
  languages and runtime environments.


## Resources

### Installation
See [Rimu README]({homepage}) for installation instructions.

### Learning
- Experiment with Rimu in the [Rimu Playground]({playground}).
- Click the _Edit icon_ {example-edit-glyph} in the examples below to enable live editing of
  the Rimu source; click the _Preview icon_&nbsp;{example-preview-glyph} to toogle output
  between _HTML_ and _Preview_.
- Read [Rimu Tips]({tips}).

### Example applications
See the [API documentation](#api).

- Rimu includes the [rimuc](#rimuc-command) command-line tool and the
  [Rimu Playground]({playground}) -- examples of using Rimu in Node.js
  and in the browser respectively.
- A toy [Chrome browser
  extension](https://github.com/srackham/rimu-chrome-extension.git)
  for rendering Rimu Markup files directly in the browser.


## Documents
A Rimu document consists of a sequence of zero or more [Block
elements](#block-elements).

### Block elements
Block elements consist of one or more lines of text and may contain
[Inline elements](#inline-elements) and, in some cases, Block
elements. Block elements are classified as either [Delimited
Blocks](#delimited-blocks) or [Line Blocks](#line-blocks).

### Delimited Blocks
A Delimited Block consists of an opening delimiter line followed by
zero or more content lines and terminated with a closing delimiter
line.  Delimited Block behaviour is [user
customizable](#delimited-block-definition).

### Line Blocks
A Line Block consists of a single line. [Headers](#headers), [Block
Attributes](#block-attributes), [single-line comments](#comments) and
_Element Definitions_ are all Line Block elements.

### Inline elements
Inline elements are contained within the textual content of block
elements. There are three types of Inline elements: [Macro
Invocations](#macro-invocations), [Quotes](#quotes) and
[Replacements](#replacements).

### Taxonomy
Rimu markup elements are categorized as follows:

.light-background
..
[Block elements](#documents)
        [Delimited Blocks](#delimited-blocks)
                [HTML Block](#html-elements)
                [Fenced Blocks](#fenced-blocks)
                        [Code Block](#code-block)
                        [Division Block](#division-block)
                        [Quote Block](#quote-block)
                [Macro Definition](#macro-definitions)
                [Multi-line Comment](#comments)
                [Paragraphs](#paragraphs)
                        [Indented Paragraph](#indented-paragraph)
                        [Normal Paragraph](#normal-paragraph)
                        [Quote Paragraph](#quote-paragraph)
        [Line Blocks](#line-blocks)
                [API Option](#api-option-element)
                [Block Attributes](#block-attributes)
                [Block Image](#images)
                [Element Definitions](#taxonomy)
                        [Macro Definition](#macro-definitions)
                        [Quote Definition](#quote-definition)
                        [Replacement Definition](#replacement-definition)
                        [Delimited Block Definition](#delimited-block-definition)
                [Header](#headers)
                [Single-line Comment](#comments)
        [Lists](#lists)
                [Bullet List](#lists)
                [Numbered List](#lists)
                [Labeled List](#lists)
[Inline elements](#inline-elements)
        [Macro Invocations](#macro-invocations)
                [Exclusion](#macro-invocations)
                [Inclusion](#macro-invocations)
                [Parametrized](#macro-invocations)
                [Simple](#macro-invocations)
        [Quotes](#quotes)
                [Bold](#quotes)
                [Emphasis](#quotes)
                [Monospaced](#quotes)
                [Strikethrough](#quotes)
        [Replacements](#replacements)
                [Character entity](#character-entities)
                [HTML tag](#html-elements)
                [Image](#images)
                [Line break](#normal-paragraph)
                [URL](#urls)
..

### Document processing
Rimu scans the input text for block elements. When a block element is
matched it is converted to HTML on the output.

Block elements in the source markup are matched in the following order of
precedence (first to last):

. [Line Blocks](#line-blocks)
. [Lists](#lists)
. [Delimited Blocks](#delimited-blocks)

Inline elements are processed in the following order (first to last):

. [Macro invocations](#macro-invocations)
. [Replacements](#replacements)
. [Quotes](#quotes)

Special character substitution takes place last.  Inline substitutions
in [Delimited Block](#delimited-blocks) elements can be controlled
using _block-options_ in the [Block Attributes](#block-attributes)
element.


## Comments
Use comments to exclude text in Rimu markup from the outputted HTML.

### Single and Multi-line comments
Rimu has both single line and multi-line comment elements.

- A _Multi-line comment_ starts with a line containing only `/*` and
  ends with a line containing only `*/`.
- A _Single-line comment_ is a line of text starting with `//`.
- Comments are not included in the HTML output.
- Comments are block elements and cannot be used inline, for example
  mid-paragraph (use [Inline comments](#inline-comments)
  instead).
- Comment delimiters must start at the left margin.
- Comments can be escaped by prefixing the opening delimiter with a
  backslash character.
- Use an [HTML](#html-elements) comment if you want the comment to be
  included in the HTML output.

Examples:

{comments-example} = '/*
  This comment does not appear in the
  rendered HTML.
*/

// This comment does not appear in the rendered HTML.

<!-- This comment appears in the rendered HTML. -->'
{generate-rendered-example-2|comments-example}

### Inline comments
The predefined [Blank macro (`--`)](#predefined-macros) can be used
for inline comments:

- Exclude individual lines using an [Exclusion macro
  invocation](#macro-invocations).
- Place comments anywhere in an inline context using a [Parametrized
  macro invocation](#macro-invocations).  This works because the Blank
  macro has no formal parameters).

{macro-comments-example} = 'Lorem ipsum dolor sit amet sapien.
\\{--!} THIS LINE IS EXCLUDED.
Imperdiet pellentesque minim.

Lorem ipsum \\{--|THIS TEXT IS EXCLUDED} dolor sit amet sapien.
Imperdiet pellentesque minim. \\{--|THIS TEXT IS EXCLUDED}

Lorem ipsum dolor sit \\{--|THIS TECHNIQUE CAN BE USED
TO EXCLUDE TEXT THAT SPANS MULTIPLE LINES
STARTING AND ENDING ANYWHERE} amet sapien.
Imperdiet pellentesque minim.'
{generate-rendered-example-2|macro-comments-example}

See also [Conditional inclusion]({tips}#conditional-inclusion).


## Headers
A _Header_ is a [Line Block](#line-blocks)  element containing a title
which is prefixed by one to six `#` or `=` characters. A matching
postfix is optional.

- Header prefixes and postfixes must be separated from the title text
  by whitespace.
- [Inline elements](#inline-elements) are allowed in the header title.

{headers-example} = '# h1 header
## h2 header ##
### h3 header
#### h4 _header_ ####
===== h5 header
====== h6 header'
{generate-rendered-example-1|headers-example}


.#fenced-blocks
## Fenced Blocks
Fenced blocks are [Delimited Blocks](#delimited-blocks) bounded by
opening and closing delimiter lines consisting of two or more
delimiter characters starting at the left margin.

- The number of characters in the closing delimiter must exactly match
  the number in the he opening delimiter -- this allows fenced blocks
  of the same type to be nested.
- The behaviour of individual Fenced Blocks can be customized with a
  preceding [Block Attributes](#block-attributes) element.
- CSS class names appended to the opening delimiter line of Code, Division and
  Quote fenced blocks will be injected into the block's opening HTML tag (this
  is an alternative to using a _Block Attributes_ element).
- Fenced Blocks can be escaped by prefixing the opening delimiter with
  a backslash character.
- You can customize the generated HTML with [Delimited Block
  definitions](#delimited-block-definition).

### Code Block
By default the all text in a _Code Block_ is rendered verbatim.  The
generated HTML is enveloped  with `<pre><code>...</code></pre>` tags.
The Code Block delimiter character is a backtick.

{code-block-example} = '``
Nunc mauris tempor.
Scelerisque feugiat massa alias.
``'
{generate-rendered-example-1|code-block-example}

### Quote Block
A _Quote Block_ renders the enclosed block elements inside an HTML
`<blockquote>` element.  The Quote Block delimiter character is a
double-quote.

{quote-block-example} = '""
Nunc mauris tempor.
Scelerisque feugiat massa alias.

.cite
Anonymous
""'
{generate-rendered-example-1|quote-block-example}

The above example uses the [rimuc](#rimuc-command) command `--layout`
option's CSS _cite_ class to style the Anonymous attribution.

### Division Block
A _Division Block_ is a container for block elements.

- The Division Block delimiter character is a period.
- If the _Division Block_ has [HTML attributes](#block-attributes)
  then the output is enclosed in an HTML `div` element.
  If the _Division Block_ has no HTML attributes then the HTML `div`
  tags are omitted.

{division-block-example} = '."font-style:italic"
..
Nunc mauris tempor.
Scelerisque feugiat massa alias.
..'
{generate-rendered-example-1|division-block-example}

_Division Blocks_ are useful for appending arbitrary block elements to
[list items](#lists). They can also be used to [conditionally
include]({tips}#conditional-inclusion) Rimu source text.

## HTML elements
Block and inline HTML elements can be mixed with Rimu markup.

- Macro invocations in HTML elements are expanded.
- HTML tags can be escaped with a backslash character prefix.
- HTML elements can be excluded from the output using the API
  [safeMode option](#api-options).

### Inline HTML elements
- Any well formed HTML tag is allowed in an inline context.

{html-inline-element-example} = 'An inline <span style="color:red;">HTML span</span>.'

{generate-rendered-example-2|html-inline-element-example}

### Block HTML elements
- The opening tag of an HTML block element must start at the left
  margin.
- An HTML block element is terminated with a blank line.

{html-block-element-example} = 'An HTML table block element:

<table class="bordered">
  <tr>
    <td>Montes adipiscing sodales.</td>
    <td>Magna placerat posuere.</td>
  </tr>
  <tr>
    <td>Nulla suspendisse egestas nulla libero sed.</td>
    <td>Wisi ullamcorper eget.</td>
  </tr>
</table>'

{generate-rendered-example-2|html-block-element-example}


## Paragraphs
Paragraph block elements are terminated by a blank line (lines
containing only space characters do not terminate a paragraph).

Individual paragraph behavior can be modified with a preceding [Block
Attributes](#block-attributes) element. The behavior of all paragraphs
can be modified with a [Delimited Block
Definition](#delimited-block-definition) (block name `paragraph` for
Normal Paragraph; `indented` for Indented Paragraph; `quote-paragraph`
for Quote Paragraph).

There are three paragraph types:

### Normal paragraph
Normal paragraphs can contain inline elements, the first line must
start at the left margin.

You can force line breaks in normal paragraphs by putting a space
followed by a backslash character at the end of a line.

Line breaks can be escaped by prefixing the trailing backslash
with another backslash character.

{normal-paragraph-example} = 'Nunc mauris tempor.
Scelerisque feugiat massa alias.'
{generate-rendered-example-1|normal-paragraph-example}

### Indented paragraph
Indented paragraphs begin with one or more space characters.  By
default the all text in an _Indented Paragraph_ is rendered verbatim.
This behavior can be changed using a preceding [Block
Attributes](#block-attributes) element.  By default the generated HTML
is enveloped  with `<pre><code>...</code></pre>` tags.

{indented-paragraph-example} = '  Nunc mauris tempor.
  Scelerisque feugiat massa alias.'
{generate-rendered-example-1|indented-paragraph-example}

### Quote paragraph
Quote paragraphs begin with a `>` character and are rendered inside an
HTML `<blockquote>` element. Leading `>` characters are optional for
all lines except the first line. Leading `>` characters can be escaped
with a backslash character.  In all other respects Quote paragraphs
behave the same as [Normal paragraphs](#normal-paragraph).

{quote-paragraph-example} = '> Nunc mauris tempor.
  Scelerisque feugiat massa alias.'
{generate-rendered-example-1|quote-paragraph-example}


## Lists
Each list item includes an identifier (ID) that groups items into
lists.  There are three types of list: _Bullet_, _Numbered_ and
_Labeled_, each with its own unique set of list IDs.

.light-background
``
List item ID                  List type
___________________________________________
-, +, *, **, ***, ****        Bullet list
., .., ..., ....              Numbered list
::, :::, ::::                 Labeled list
___________________________________________
``

{bullet-lists-example} = '
- First item.
  . Nested numbered item.
- Second item of first list.'

{labeled-lists-example} = '
First term:: Definition one.
Second term::
Definition for second term.'

{list-item-example} = '
- First line.
  Second line.
""
Optional attached Quote block.
""
  * Optional child list.'

- _Bullet_ and _Numbered_ list items begin with the list ID.  The list
  ID must be separated by one or more spaces from the list item text.
..
{generate-rendered-example-1|bullet-lists-example|Bullet and numbered lists}
..
- _Labeled_ list items begin with the _term_ text followed
  immediately by the list ID, then one or more spaces or a line break,
  then the _definition_ text.
..
{generate-rendered-example-1|labeled-lists-example|Labeled list}
..
- A list item consists of a first line followed by zero or more
  additional lines, followed by an optional [attached
  element](#attached-list-item-elements), followed by an optional
  child list.
..
{generate-rendered-example-1|list-item-example|List item}
..
- List items and attached elements can be preceded by [Block
  Attribute]({reference}#block-attributes) elements.  This facilitates
  styling and linking within lists.
- List items can be indented but this has no semantic significance
  (indents are fussy to write and are prone to editor tab expansion
  and copy-and-paste corruption).
- _Numbered_ list IDs can be prefixed with numbers but the number has no
  semantic significance.
- A child list is created when a list item is followed by an item with
  a list ID that does not belong to the current list or any of its
  ancestors.
- List items can be escaped with a backslash at the beginning of the
  line.

.#attached-list-item-elements
- _Indented paragraphs_, _Quote paragraphs_, _Fenced blocks_, _HTML
  blocks_ and _Multi-line comments_ can be attached to list items:

  * If an [Indented paragraph](#indented-paragraph) or [Quote
    paragraph](#quote-paragraph) is separated from
    a preceding list item by a single blank line then it is attached
    to the list item.
  * If a [Fenced
    block](#fenced-blocks), [HTML block](#block-html-elements) or
    [Multi-line comment](#comments) immediately follows a list item
    without any intervening blank lines then it is attached to the
    list item.

- Lists are terminated:

  * When the element following the list item is not a list item.
  * When the element following the list item is an ancestor list item.
  * By two or more blank lines.

- There are no explicit numbering or bullet styles -- this is best
  left to CSS which can apply a consistent set of list styles.

{lists-example} = '- Lorem ipsum dolor sit amet dis quisque maecenas in tristique arcu
\- lorem dolor fusce nec.
  * Sit pretium quisque in wisi lobortis.
  * Ac curabitur elementum.
    ** Platea ad diam arcu vitae fermentum.
       1. Eu lorem nulla.
       2. In suspendisse at dapibus nostra est.
          .. Montes adipiscing sodales.
    ** Pellentesque nibh sit.
- Viverra pede turpis.
  Esse et dui:: Nonummy modi.
  Wisi ad diam:: Sapien porttitor.
    Condimentum::: Lacus maecenas neque dolor habitant tellus.
- Augue et dui malesuada purus.

  Purus aliquam mauris a aliquam orci. Massa sit sit.
  penatibus. Maecenas at tellus. Sapien quam mauris.
  Non a pede in.

  * Ac lacinia mi.
  * Egestas congue quam.

- Facilisi vestibulum montes quam eget donec.
..
Cras proin molestie quam sem conubia. Ligula vel elit. Elit a earum.
Arcu eget magna. Class vivamus morbi.

Ac lacinia mi. Mi in enim. Dui sed ut. Egestas congue quam. Facilisis
non magnis facilisi scelerisque luctus. Quis praesent pulvinar.
..
- Integer quisque hendrerit. Arcu nunc lorem posuere.

> Egestas congue quam.'

{generate-rendered-example-2|lists-example}


## Quotes
Text can be formatted by enclosing it in one or two quote characters.
The built-in quotes are:

.light-background
``
Rimu            Rendered HTML             Font style
___________________________________________________________
_emphasis_      <em>emphasis</em>         Italic
*emphasis*      <em>emphasis</em>         Italic
__strong__      <strong>strong</strong>   Bold
**strong**      <strong>strong</strong>   Bold
`code`          <code>code</code>         Monospaced
``code``        <code>code</code>         Monospaced
~~deleted~~     <del>deleted</del>        Strikethrough
___________________________________________________________
``

- Quoted text must begin and end with non-whitespace characters.
- Quotes and inline elements can be nested within a quote with the
  exception of the _Code_ quote.
- Single underscore quote characters within words are ignored if they
  are flanked on both sides by alphanumeric characters (use single
  asterisk quotes to emphasize text within words).
- Quotes can be escaped by prefixing the opening quote with with a
  backslash character. If the text contains multiple quotes of the
  same type then, to resolve ambiguity, additional quotes may have to
  be escaped.
- The _Code_ quote renders quoted text verbatim with one exception:
  [Macro Invocations](#macro-invocations) are expanded.

{quote-example} = 'Some **bold text**,
some _emphasized text_,
some `monospaced text` and
some ~~deleted text~~.'
{generate-rendered-example-1|quote-example}


### Quote Definition
You can modify existing quote behavior or add new quotes using _Quote
definitions_.

Definition syntax:

  quote-delimiter = '<open-tags>|<close-tags>'

- `quote-delimiter` can be one or two characters.
- `open-tags` and `close-tags` are the HTML tags that envelope the
  generated HTML.
- Use a two-bar `||` separator to render the quoted text
  verbatim (like the built-in _code quote_).
- A Quote definition must start at the left margin and must not
  extend beyond the end of the line.
- Quote definitions are not processed if the [SafeMode API
  option](#api-options) is non-zero.
- Macro invocations are expanded inside the `open-tags` and
  `close-tags`.

The following quote definition envelopes quoted text with an HTML
superscript tag:

  ^ = '<sup>|</sup>'


## Replacements
A _Replacement_ replaces matched source text with some other text
(usually HTML markup). A replacement is defined by a regular
expression (to find the matched text) and the text to be replaced.

With the exception of [Quotes](#quotes) all Rimu [Inline
elements](#inline-elements) are implemented as replacements e.g.
[character entities](#character-entities), [URLs](#urls), [inline
images](#images), [inline HTML tags](#html-elements).

### Replacement Definition
Definition syntax:

  /pattern/flags = 'replacement'

- The regular expression `pattern` syntax and available flags are
  platform dependent (see [Regular
  Expressions](#regular-expressions)).
- `$1`, `$2`... and `$$1`, `$$2`... in `replacement` are replaced by
  the corresponding regular expression match groups. `$0` and `$$0`
  are replaced by the entire match.

  * Special characters are escaped in `$1`, `$2`...
  * [Quotes](#quotes) are expanded and special characters escaped in
    `$$0`, `$$1`, `$$2`...

- Replacements are only expanded in inline contexts.
- Replacements are not expanded inside [Code quotes](#quotes), [Code
  blocks](#code-block) or [Indented paragraphs](#indented-paragraph).
- If the first matched character is a backslash then replacement will
  be escaped i.e. starting the regular expression with `\\?` will
  ensure it can be escaped.
- A replacement definition must start at the left margin and must not
  extend beyond the end of the line.
- The `replacement` text can invoke previously defined macros.
- Replacement definitions are not processed if the [SafeMode API
  option](#api-options) is non-zero.
- If the replacement definition _pattern_ matches that of an existing
  definition it will replace the existing definition, otherwise it is
  appended to the end of the replacement definitions list
  (where it assumes the lowest precedence).

Example replacement definitions:

``
/\.{3}/ = '&hellip;'
/\bTODO\b/ = '<b style="color: red; background-color: yellow;">TODO</b>'
``


## URLs
URLs and email address elements are implemented with built-in
[Replacements](#replacements).

Syntax:

.light-background
``
Rimu                Rendered HTML
______________________________________________________________________
url                 <a href="url">url</a>                       Note 1
<url>               <a href="url">url</a>
<url|caption>       <a href="url">caption</a>
[caption](url)      <a href="url">caption</a>                   Note 2
^[caption](url)     <a href="url" target="_blank">caption</a>   Note 3
<email>             <a href="mailto:email">email</a>
<email|caption>     <a href="mailto:email">caption</a>
______________________________________________________________________
``

Notes:

1. Only HTTP and HTTPS raw URLs are auto-encoded.
2. The `[caption](url)` syntax is Markdown compatible.
3. Opens the link in a new browser tab.

{urls-example} = '1. http://example.com
2. <http://example.com>
3. <http://example.com|Example>
4. [Example](http://example.com)
5. ^[Example](http://example.com)
6. <example.html>
7. <example.html#basics|The basics>
8. <#api-options|API Options>
9. <file:///example/user-guide.pdf|User Guide>
10. <file:///downloads/>
11. <ftp://example.com/rfc959.txt|rfc959.txt>
12. <joe@example.com>
13. <joe@example.org|Joe Bloggs>'

{generate-rendered-example-1|urls-example}


## Images
Syntax:

.light-background
``
Rimu                Rendered HTML
_______________________________________________________
<image:url|alt>     <img href="url" alt="alt">
<image:url>         <img href="url" alt="url">
![alt](url)         <img href="url" alt="alt">   Note 1
_______________________________________________________
``

Notes:

1. The `![alt](url)` syntax is Markdown compatible. To maintain Markdown
   compatibility it is always processed as an inline element i.e. a standalone
   image will be enclosed within an HTML paragraph element. Use a standalone
   HTML `img` element if you want an image to be rendered as a block element
   (without enclosing paragraph tags).

{images-example} = 'An image can be rendered as a block element:

<image:https://www.w3.org/Icons/w3c_home.png|W3C logo>

Centered using [rimuc](#rimuc-command) `--layout` option CSS class:

.align-center
![W3C logo](https://www.w3.org/Icons/w3c_home.png)

Or an image can be <image:https://www.w3.org/Icons/w3c_home.png> an
inline element.'

{generate-rendered-example-1|images-example}


## Character entities
HTML character entities can be included in Rimu source.

{entities-example} = '&copy; &reg; &alpha; &omega;'

{generate-rendered-example-1|entities-example}

Character entities can be escaped with a backslash character prefix.


## Block Attributes
The _Block Attributes_ [Line Block](#line-blocks) element injects HTML
attributes into the opening tag of the next block element. You can
specify class names, an element ID, CSS styles and any other HTML
attributes.  The Block Attributes element can also include
[block-options](#delimited-block-definition) which control the
processing of [Delimited Block](#delimited-blocks) elements.

Syntax:

  .class-names #id "css-properties" [html-attributes] block-options

- `block-options` is used to control the processing of the succeeding
  [Delimited Block element](#delimited-block) contents.
- Macro invocations in _Block Attributes_ are expanded.
- The leading period character must start at the left margin and the
  attributes must not extend beyond the end of the line.
- All items are optional but their order is not.
- Successive Block Attributes elements accumulate until they are
  consumed by the first succeeding Delimited Block element.
- `class-names` is one or more HTML _class_ attribute names (separated
  by spaces).
- `id` is a unique HTML _id_ attribute value.
- `css-properties` is one or more CSS property name/value pairs: it
  injects a `style="css-properties"` attribute into the target
  opening tag.
- `html-attributes` is one or more HTML attribute name/value pairs:
  they are injected into the target opening tag.
- The `[html-attributes]` section is ignored if the [safeMode API
  option](#api-options) is not zero.
- The `-specials` block option is ignored if the [safeMode API
  option](#api-options)  is not zero.
- The entire Block Attributes element is ignored if bit 2 of the
  [safeMode API option](#api-options) is set.

{block-attributes-example} = '.error "color:red"
Lorum ipsum.

.#ref2 "color:green" [title="Reference two"]
Ac curabitur elementum.

\{quote-style} = '."padding-left: 10px; border-left: 4px solid silver;"'\

\{quote-style}
""
Lorem ipsum dolor sit amet sapien. Nascetur et mattis maecenas morbi
porttitor. Vitae vestibulum voluptate. Quam elit id. In eu wisi.
Imperdiet pellentesque minim. Metus mauris tortor. Torquent leo vel.
""

.-macros
Macro \{invocations} are not expanded when the `-macros` block option
is set.'

{generate-rendered-example-2|block-attributes-example}


## Delimited Block Definition
You can change [Delimited Block](#delimited-blocks) behaviour with
_Delimited Block definitions_.

Definition syntax:

  |block-name| = '<open-tags>|<close-tags> block-options'

- `block-name` is is one of the following [Delimited
  Block](#delimited-blocks) names:
..
[`code`](#code-block), \
[`comment`](#comments), \
[`division`](#division-block), \
[`html`](#html-elements), \
[`indented`](#indented-paragraph), \
[`quote`](#quote-block), \
[`quote-paragraph`](#quote-paragraph), \
[`paragraph`](#normal-paragraph).

..

- `open-tags` and `close-tags` define the HTML tags that envelope the
  output block. `<open-tags>|<close-tags>` is optional.
- `block-options` is used to control the processing of Delimited block
  elements.  `block-options` is optional and consists of one or more
  of the following space separated options:
..
`+macros` (enable macro expansion), \
`-macros` (disable macro expansion), \
`+spans` (enable [Quote](#quotes) and [Replacement](#replacements) element processing), \
`-spans` (disable [Quote](#quotes) and [Replacement](#replacements) element processing), \
`+specials` (enable special character entities), \
`-specials` (disable special character entities), \
`+container` (the block is a container for Rimu block elements), \
`-container` (turn off the container option), \
`+skip` (skip the block), \
`-skip` (turn off the skip option).
..

- A Delimited Block definition must start at the left margin and must
  not extend beyond the end of the line.
- Delimited Block definitions are not processed if the [safeMode API
  option](#api-options) is non-zero.
- Macro invocations in the definition are expanded.
- `macros`, `spans` and `specials` block options are not applied to
  Division or Quote blocks or Lists.

The following example generates Code blocks with a `code-block`
class attribute:

  |code| = '<pre><code class="code-block">|</code></pre>'

The following example disables _Macro Invocation_, _Quote_ and
_Replacement_ processing in Paragraphs:

  |paragraph| = '-macros -spans'


## Macros
Macros are a simple yet powerful mechanism for creating shortcuts for
repeatedly used markup.  They can be used to parametrize documents,
promote clarity and eliminate repetition (see [Macro
Examples](#macro-examples)).

Rimu provides elements for defining and invoking macros and includes
features like macro parametrization, conditional processing and
meta-programming.

### Macro definitions
A macro definition assigns one or more lines of Rimu markup to a macro
name.

Definition syntax:

.light-background
``
{macro-name} = 'macro-value'         Simple macro definition
{macro-name?} = 'macro-value'        Existential macro definition
``

- A macro definition must start at the left margin.
- A macro name consists of one or more alphanumeric, underscore or
  dash characters.
- _Simple_ macro definitions are processed unconditionally;
  _Existential_ macro definitions are only processed if the macro has
  not been defined.
- Macro values are enclosed by single-quote characters and can extend
  over multiple lines.
- Single-quotes at the end of a line can be escaped by appending a backslash
  character to the end of the line.
- Macro values can contain macro invocations:
  * The macro invocations are expanded when the definition is processed (not
    when it is invoked).
  * Escaped macro invocations will be unescaped when the definition is
    processed, consequently they need to double-escaped if you want them to be
    escaped when the macro definition is invoked.
- Macro expansion can be disabled in multi-line macro definitions
  using a [Block Attributes](#block-attributes) `-macros` option.
- `$1`, `$2`... and `$$1`, `$$2`... are parameter names, they are
  replaced with parameter values in _Parametrized_ macro invocations.


### Macro invocations
Invocation syntax:

.light-background
``
{macro-name}                      Simple macro invocation
{macro-name|[param1|param2...]}   Parametrized macro invocation
{macro-name=pattern}              Inclusion macro invocation
{macro-name!pattern}              Exclusion macro invocation
``

- A _Simple_ macro invocation is replaced by the macro value.
- `$1`, `$2`... and `$$1`, `$$2`... parameter names are replaced with
  the corresponding parameter values (`param1`, `param2`...) in
  _Parametrized_ macro invocations.

  * If a macro parameter value is not specified then the corresponding
    parameter name is replaced by a blank string.
  * Parameter names in macro definitions can be escaped with a
    backslash character prefix e.g. `\$1`.
  * Macro parameter values can contain inline Rimu elements;
    inline parameter values can span multiple lines.
  * [Quotes](#quotes) and [Replacements](#replacements) are expanded
    and special characters escaped inside double-dollar parameters
    (`$$1`, `$$2`...). Double-dollar parameters are normally only
    necessary inside [Block HTML elements](#block-html-elements).
  * Default parameter values can be specified by appending
    `:default-value$` to the parameter name e.g. `$2:Ford$` will
    assign `Ford` to the `$2` parameter if it is blank or not specified
    in the macro invocation.
  * Dollar characters can be included in default parameter values by
    escaping them with a backslash character e.g. `$2:Ten dollars
    (\$10)$`.
  * The default value can span multiple lines.
  * The default value can be escaped by prefixing the colon with a
    backslash character e.g. `$2\:One dollar$`.
  * The `\{macro-name|}` invocation syntax uses only default parameter
    values. This is **not the same** as the `\{macro-name}` simple
    macro invocation which performs no parameter substitution.

- The `\{macro-name=pattern}` _Inclusion_ invocation is replaced by a
  blank string if the macro value entirely matches the `pattern`
  (where `pattern` is a regular expression.  If the macro value does
  not match the `pattern` the containing line is skipped.
- The `\{macro-name!pattern}` _Exclusion_ invocation syntax is the
  inverse of the `\{macro-name=pattern}` syntax i.e. the macro
  invocation is replaced by a blank string if the macro value does not
  match the `pattern`, if it does match the containing line is
  skipped.
- The regular expression `pattern` syntax in inclusion and exclusion
  invocations is platform dependent (see [Regular
  Expressions](#regular-expressions)).
- By default macro invocations are expanded everywhere except inside
  _Code_ blocks and _Indented_ paragraphs. Use the [Block
  Attributes](#block-attributes) `+macros` and `-macros` options to
  enable and disable expansion inside [Delimited
  blocks](#delimited-blocks).
- Undefined macro invocations are not processed and are passed
  verbatim to the output.
- Macro invocations can be escaped in block elements that have macro
  expansion enable using a leading backslash character prefix. Escaped
  macro invocations are rendered verbatim minus the backslash.
  Escaping is unnecessary in blocks that do not perform macro
  expansion (_Code_ blocks and _Indented_ paragraphs).
- _Simple_ macro invocations are allowed in macro parameters and
  patterns (non-Simple invocations are not).
- Macro invocations can contain `}` characters but they must be
  escaped with a backslash character (otherwise they will be mistaken
  for the macro's closing brace).
- Macro definitions are not processed if the [safeMode API
  option](#api-options) is non-zero and bit 3 of [safeMode API
  option](#api-options) is not set.

### Macro expansion
- Macro invocations are expanded before other elements are processed.

- Macro invocations are processed as [Inline
  elements](#inline-elements) with one exception: If a block element
  begins with a Macro Invocation that is wholly contained on the first
  line then macro invocations in the first line are expanded prior to
  all other processing, this behaviour enables the following
  use-cases:

  . [Conditional inclusion]({tips}#conditional-inclusion) of [Line
    Block](#line-blocks) elements by prefixing them with _Inclusion_ or
    _Exclusion_ macros.

  . Macros can be used to generate Rimu Block elements. For example,
    take a look at the `\{sidebar}` macro in [these
    examples]({tips}#using-rimu-macros), it generates a _Header_ block
    element followed by a _Block Attributes_ block element.

### Macro examples

- [Using Rimu Macros]({tips}#using-rimu-macros).
- [Use macros to create tables]({tips}#use-macros-to-create-tables).
- [Macro meta-programming]({tips}#macro-meta-programming).
- [Macro tips]({tips}#macro-tips).
- [General purpose macro processor]({tips}#general-purpose-macro-processor).

### Reserved macro names
Macros with names starting with two hyphen characters are reserved for
use by Rimu. Reserved macros are used by the Rimu library and by the
[rimuc command](#rimuc-command).

### Predefined macros
The following macros are available for use in Rimu markup:

.light-background
``
Macro name         Description
_______________________________________________________________
--                 Blank macro (empty string).
                   The Blank macro cannot be redefined.
--header-ids       Set to a non-blank value to generate h1, h2
                   and h3 header id attributes.
_______________________________________________________________
``
- See [Header id generation](#header-id-generation).

### Header id generation
If the [predefined macro](#predefined-macros) `--header-ids` is
non-blank Rimu generates unique HTML `id` attributes for `h1`, `h2`
and `h3` [section headers](#headers) that do not have an explicit id.

HTML `id` attributes are generated from Rimu header text as follows:

. Replace characters that are not alphanumeric or underscores with
  dash characters.
. Replace multiple contiguous dashes with single dash.
. Trim leading and trailing dashes.
. Convert the text to lowercase.
. If no characters remain the id is set to `x`.
. If an existing element has a matching id then the id is
  successively postfixed with `-2`, `-3`... until a unique id is
  found.

For example a header with the title `The End!` will be assigned an
`id` attribute value `the-end`


## API Option element
[API options](#api-options) can be set in the Rimu source using a [Line
Block](#line-blocks) element with the following syntax:

  .option-name = 'option-value'

- `option-name` is `safeMode`, `htmlReplacement` or `reset`.
- The `option-value` is a valid option value.
- Macro invocations in `option-value` are expanded.
- An API Option element must start at the left margin and must not
  extend beyond the end of the line.
- The option is applied to Rimu markup that follows the option element.
- API Option elements are not processed if the `safeMode` is non-zero.

For example, the following API Option element ensures all subsequent
raw HTML is not passed to the output:

  .safeMode = '1'


.#rimuc-command
## CLI command
Rimu includes a command-line tool that converts Rimu markup to HTML. There are
four functionally identical implementations: _rimuc_ (JavaScript
implementation), _rimukt_ (Kotlin implementation), _rimugo_ (Go implementation),
_rimuc_ (Dart implementation) and _rimupy_ (Python implementation).

In the documentation the name _rimuc_ refers to all four implementations
(unless stated otherwise).

_rimuc_ has options to generate stand-alone styled HTML documents, either from
Rimu Markup or [from Markdown or any text-to-HTML markup]({tips}#rimuc-html).

Run `rimuc --help` to view the `rimuc` manpage:

.light-background
{manpage}

### Example usage

1. Use _rimuc_ as a filter:

  echo 'Hello *Rimu*!' | rimuc

2. Generate a styled HTML document with a table of contents and code
   syntax highlighting: options:

  rimuc --layout sequel --highlightjs reference.rmu

3. Prefix a custom macro definition:

  rimuc --prepend "{annotations}='yes'" showcase.rmu

4. Compile multiple source files to single output file:

  rimuc -o book.html frontmatter.rmu chapter*.rmu backmatter.rmu

### `--layout` option
The `--layout` option is used to generate styled HTML documents.  It
does this by enveloping the compiled output in a layout specific HTML
header and footer.

`rimuc` comes with [built-in layouts](#built-in-layouts).

All features enabled by the `--layout` option are implemented with
Rimu markup in the header and footer files.  The `--layout` option
concatenates the input with built-in header and footer files.  For
example, the following two commands are functionally identical:

``
rimuc --layout sequel sites.rmu
rimuc --output sites.html sequel-header.rmu sites.rmu sequel-footer.rmu
``

### Built-in Layouts
You can choose from the following built-in layouts:

sequel:: Responsive cross-device layout designed to render nicely on
desktops, laptops, tablets and phones. This website uses the _sequel_
layout.

classic:: Desktop-centric layout.

  - Not suitable for small screens (the TOC sidebar is hidden on small screens).
  - Set the `--dropdown-toc` macro to a non-blank value to place the
    table of contents in a popup.

flex:: Flexbox layout. Works nicely with small screens.

  - The menu bar automatically positions along the top when the device
    orientation is portrait.
  - Set the `--top-bar` macro to a non-blank value to place the
    navigation bar along the top of the document.

plain:: Unstyled HTML layout.

  -  Does not support any layout classes or layout options.

v8:: Deprecated Rimu version 8 layout.

Examples of the built-in layouts can be viewed in the [Rimu
Gallery]({gallery}).

The built-in layouts:

- Create a stand-alone HTML5 document.
- Optionally generate a [table of contents](#toc-generation).
- Include CSS styles for verses, sidebars, text alignment,
  page break control and section numbering (see `rimuc --help` command
  and examples in [Rimu Tips]({tips})).
- Generate unique [header id](#header-id-generation) attributes.
- If the `--highlightjs` macro is non-blank
  [Highlightjs]({tips}#syntax-highlighting) is included.
- If the `--mathjax` macro is non-blank
  [MathJax]({tips}#mathematical-formulae) is included.
- Support named [themes]({tips}#themes).

A number of built-in layout styles are set by header file macro values
that can be overridden. For example:

  rimuc --layout sequel --prepend "{--primary-color}='#0cc'" sites.rmu

You can view full list of layout macros in the corresponding built-in
layout [header file]({github-rimu}/tree/master/src/rimuc/resources).

### Themes
A theme is a layout styling variation.  Named themes are specified
using the `--theme` option.  The built-in layouts implement _legend_,
_graystone_ and _vintage_ themes.

Examples of the built-in layout themes can be viewed in the [Rimu
Gallery]({gallery}).

The `--theme` option value sets the `--theme` macro which the layout
header then uses to [conditionally
include]({tips}#conditional-inclusion) HTML `style` elements.

.#toc-generation
### Table of contents generation
Built-in layouts automatically include a table of contents in the
generated HTML document.

- The table of contents is synthesised from top level `h1`, `h2` and
  `h3` HTML header elements.
- You can suppress the table of contents generation using the
  `--no-toc` option.
- The `--custom-toc` option allows the user to include a [custom
  TOC](#custom-table-of-contents).
- Use the `no-auto-toc` CSS class attribute to exclude a section
  header from the table of contents, for example:

  .no-auto-toc
  ## This header does not appear in the TOC

### Custom table of contents
The `--custom-toc` option is used in conjunction with built-in
layouts. The `--custom-toc` option inhibits the generation of an HTML
TOC container and it is up to the user to include a custom HTML TOC
container in the Rimu markup. This allows you to customise the
location, style and content of the TOC:

- The TOC container must be an HTML element with `id="toc"`.
- If the document contains an element with `id="auto-toc"` then it
  will be loaded with the auto-generated TOC entries, if this element
  is omitted TOC entries will be skipped.

If `--custom-toc` is not specified the following TOC container is
inserted in the output document:

``
<div id="toc">
  <div id="auto-toc"></div>
</div>
``

/*
### Imported Layouts
`rimuc` supports third-party externally sourced layouts. When the
`--layout <layout-name>` option is specified `rimuc` searches for a
built-in layout with the same name. If it is not found then an attempt
is made to import a Node.js module named like
`rimu-<layout-name>-layout`.  The imported module contains two
attributes, `header` and `footer`, which return the Rimu header markup
and footer markup respectively.

For example, take a look at the [Rimu _plain_
Layout](https://github.com/srackham/rimu-plain-layout.git).

Consult the imported layout's documentation for supported layout
options.
*/


.#api
## API
Rimu has just one API for translating Rimu markup to HTML:

  render(source [, options])

The `source` argument is a string containing Rimu markup. The return
value is a string containing the resultant HTML.
The optional `options` argument controls rendering behaviour.

The `render()` API is stateful: macros and custom element definitions
are retained across API calls along with API options.
Use the `reset` option to restore the default state.

### Example usage
#### Node.js
``` javascript
var rimu = require('rimu');
var html= rimu.render('Hello *Rimu*!');
```
See [Rimu README]({github-rimu}).

#### Deno
``` typescript
import * as rimu from "https://raw.github.com/srackham/rimu/master/mod.ts";

console.log(rimu.render("Hello *Rimu*!"));
```
See [Rimu README]({github-rimu}).

#### Kotlin
``` kotlin
import org.rimumarkup.RenderOptions
import org.rimumarkup.render

fun main(args: Array<String>) {
    println(render("Hello *Rimu*!", RenderOptions(reset = true))
}
```
See the [Kotlin README]({github-kt}).

#### Go
``` go
package main

import (
    "fmt"

    "github.com/srackham/go-rimu/v11/rimu"
)

func main() {
    fmt.Println(rimu.Render("*Hello Rimu*!", rimu.RenderOptions{Reset: true}))
}
```
See the [Go README]({github-go}).

#### Dart
``` typescript
import 'package:rimu/rimu.dart';

main(List<String> arguments) {
  print(render('Hello *Rimu*!', RenderOptions(reset: true)));
}
```
See the [Dart README]({pubdev-rimu}).

#### Python
``` python
import rimu

print(rimu.render('*Hello World*!', rimu.RenderOptions(reset=True)))
```
See the [Python README]({pypi-rimu}).

### API options
The API `options` argument is an object with zero or more of the
following properties:

`safeMode`::
..
This option has a number value that controls how Rimu renders embedded
HTML and how Rimu definition and option elements will be processed:

.light-background
``
0 => Render HTML (default behavior).
1 => Ignore HTML.
2 => Replace HTML with the 'htmlReplacement' option string.
3 => Render HTML as text.

Add 4 to safeMode to ignore Block Attribute elements.
Add 8 to safeMode to allow Macro Definitions.
``

- If `safeMode` is zero all Rimu elements will be processed.
- If `safeMode` is non-zero the following Rimu elements are ignored:
  * Rimu definition elements (_Delimited Block_, _Macro_, _Quote_
    and _Replacement_ definitions).
  * _API Option_ elements.
  * HTML attributes in _Block Attribute_ elements.
- Add 4 to `safeMode` to ignore _Block Attribute_ elements completely,
  this ensures HTML element IDs cannot be created and that CSS classes
  or properties cannot be used explicitly.
- Add 8 to `safeMode` to allow Macro Definitions. Allowing Macro
  Definitions is not intrinsically unsafe because their safety or
  otherwise is solely determined by the safety of their constituent
  elements.
- For example, a `safeMode` value of 13 (1+4+8) skips HTML elements,
  allows macro definitions but skips all other Rimu definition
  elements along with API option elements.
- Once a non-zero `safeMode` has been set then it can only be reset by
  a `render()` API call with a `safeMode:0` or a `reset:true` option.
..

`htmlReplacement`::
A string that replaces embedded HTML when `safeMode` is set to `2`.
Defaults to `<mark>replaced HTML</mark>`.

`callback`::
..
`callback` is a function that handles diagnostic events emitted by the
`render()` API.  The `callback` function is passed a single `message` argument.
The `message` argument is an object with a `type` property (`'error'`,
`'warning'` or `'info'`) and a `text` property (a string containing the
diagnostic message). Callback examples:

`` javascript
// JavaScript and TypeScript.
function callback(message) {
    console.log(message.type + ': ' + message.text);
}

var html = Rimu.render('Hello *Rimu*!', {callback: callback});
``

`` python
# Python.
def callback(message):
    print(f'{message.type}: {message.text}')

html = rimu.render('Hello *Rimu*!', rimu.RenderOptions(callback=callback))
``

`` dart
// Dart.
callback(CallbackMessage message) {
  print('${message.type}: ${message.text}');
}

var html = render('Hello *Rimu*!', RenderOptions(callback: callback));
``

`` kotlin
// Kotlin.
fun callback(message: CallbackMessage) {
    println("${message.type}: ${message.text}")
}

var html = render("Hello *Rimu*!", RenderOptions(callback = callback))
``
..

`reset`::
This boolean option causes the render API to be set to its default
state (default option values; default Quotes, Replacements and
Delimited Block definitions; predefined macro definitions only; no
callback). The `reset` option is processed before other options.


.#vim-syntax-file
## Vim syntax file
The Rimu distribution includes a
<https://github.com/srackham/rimu/blob/master/src/vim/syntax/rimu.vim|syntax
highlighter> for the Vim editor. Copy `rimu.vim` to your
`$HOME/.vim/syntax` directory and then use the Vim `:set syn=rimu`
command or put this line in your `$HOME/.vimrc` file to enable Rimu
syntax highlighting:

  autocmd BufRead,BufNewFile *.rmu setlocal filetype=rimu

The syntax file also sets Vim text formatting options, if they're not
to your taste delete them from the end of the file.


## Regular Expressions
Regular expressions can be embedded in [replacements](#replacement-definition)
definitions and [inclusion/exclusion macro](#macro-invocations) invocations.

The language specific regular expression engine is used. This means
that platform differences between regular expression syntax is a
potential source of cross-platform incompatibility.  To avoid
cross-platform incompatibility use regular expression syntax that is
common to all platforms:

- JavaScript, TypeScript and Dart use [ECMA-262 regular
  expressions](https://ecma-international.org/ecma-262/5.1/#sec-15.10).
- [Java and Kotlin regular
  expressions](https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html).
- [Go regular expressions](https://github.com/google/re2/wiki/Syntax).
- [Python regular expressions](https://docs.python.org/3/library/re.html).

Guidelines:

- No named groups.
- No look-ahead or look-behind groups.
- No backreferences (`\1, \2, ...`).
- Use only the `i` flag in replacement definitions.
- No embedded flags.


## Rimu implementations
Here is a list of Rimu implementations:

- The canonical [TypeScript version]({github-ts})
  for Deno, Node.js and browser runtime environments.
- A [Kotlin port]({github-kt}) for the JVM platform.
- A [Go language port]({github-go}).
- A [Dart port]({pubdev-rimu}).
- A [Python port]({pypi-rimu}).

### Version numbering

- All implementations use [semantic version numbers](https://semver.org/).
- Implementations with the same major and minor version numbers are functionally
  identical.
- The patch version numbers are port specific.
- Changes to one implementation will normally be propagated to the next release
  of other Rimu implementations but there is no implied equivalence of the
  patch version numbers across the various ports.


## Other
- By convention Rimu markup text files have a `.rmu` file name
  extension but if your markup is confined to Rimu's Markdown
  compatible subset then use `.md` to signal your intent.
