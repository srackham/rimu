let defs$5;const DEFAULT_DEFS$2=[{quote:"**",openTag:"<strong>",closeTag:"</strong>",spans:true},{quote:"*",openTag:"<em>",closeTag:"</em>",spans:true},{quote:"__",openTag:"<strong>",closeTag:"</strong>",spans:true},{quote:"_",openTag:"<em>",closeTag:"</em>",spans:true},{quote:"``",openTag:"<code>",closeTag:"</code>",spans:false},{quote:"`",openTag:"<code>",closeTag:"</code>",spans:false},{quote:"~~",openTag:"<del>",closeTag:"</del>",spans:true}];let quotesRe;let unescapeRe;function init$5(){defs$5=DEFAULT_DEFS$2.map((def=>copy(def)));initializeRegExps()}function initializeRegExps(){const quotes=defs$5.map((def=>escapeRegExp(def.quote)));quotesRe=RegExp("\\\\?("+quotes.join("|")+")([^\\s\\\\]|\\S[\\s\\S]*?[^\\s\\\\])\\1","g");unescapeRe=RegExp("\\\\("+quotes.join("|")+")","g")}function getDefinition$1(quote){return defs$5.filter((def=>def.quote===quote))[0]}function unescape(s){return s.replace(unescapeRe,"$1")}function setDefinition$2(def){for(const d of defs$5){if(d.quote===def.quote){d.openTag=def.openTag;d.closeTag=def.closeTag;d.spans=def.spans;return}}if(def.quote.length===2){defs$5.unshift(def)}else{defs$5.push(def)}initializeRegExps()}let defs$4;const DEFAULT_DEFS$1=[{match:/\\?<<#([a-zA-Z][\w\-]*)>>/g,replacement:'<span id="$1"></span>',filter:function(match){if(skipBlockAttributes()){return""}return replaceMatch(match,this.replacement)}},{match:/\\?<image:([^\s|]+)\|([^]*?)>/g,replacement:'<img src="$1" alt="$2">'},{match:/\\?<image:([^\s|]+?)>/g,replacement:'<img src="$1" alt="$1">'},{match:/\\?!\[([^[]*?)]\((\S+?)\)/g,replacement:'<img src="$2" alt="$1">'},{match:/\\?<(\S+@[\w.\-]+)\|([^]+?)>/g,replacement:'<a href="mailto:$1">$$2</a>'},{match:/\\?<(\S+@[\w.\-]+)>/g,replacement:'<a href="mailto:$1">$1</a>'},{match:/\\?\[([^[]*?)]\((\S+?)\)/g,replacement:'<a href="$2">$$1</a>'},{match:/\\?<(\S+?)\|([^]*?)>/g,replacement:'<a href="$1">$$2</a>'},{match:/\\?(<!--(?:[^<>&]*)?-->|<\/?([a-z][a-z0-9]*)(?:\s+[^<>&]+)?>)/gi,replacement:"",filter:function(match){return htmlSafeModeFilter(match[1])}},{match:/\\?<([^|\s]+?)>/g,replacement:'<a href="$1">$1</a>'},{match:/\\?((?:http|https):\/\/[^\s"']*[A-Za-z0-9/#])/g,replacement:'<a href="$1">$1</a>'},{match:/\\?(&[\w#][\w]+;)/g,replacement:"",filter:function(match){return match[1]}},{match:/[\\ ]\\(\n|$)/g,replacement:"<br>$1"},{match:/(\S\\)(?=`)/g,replacement:"$1"},{match:/([a-zA-Z0-9]_)(?=[a-zA-Z0-9])/g,replacement:"$1"}];function init$4(){defs$4=DEFAULT_DEFS$1.map((def=>copy(def)))}function setDefinition$1(regexp,flags,replacement){if(!/g/.test(flags)){flags+="g"}for(const def of defs$4){if(def.match.source===regexp){def.match=new RegExp(regexp,flags);def.replacement=replacement;return}}defs$4.push({match:new RegExp(regexp,flags),replacement:replacement})}function render$6(source){let result;result=preReplacements(source);let fragments=[{text:result,done:false}];fragments=fragQuotes(fragments);fragSpecials(fragments);result=defrag(fragments);return postReplacements(result)}function defrag(fragments){return fragments.reduce(((result,fragment)=>result+fragment.text),"")}function fragQuotes(fragments){const result=[];fragments.forEach((fragment=>{result.push.apply(result,fragQuote(fragment))}));result.filter((fragment=>!fragment.done)).forEach((fragment=>fragment.text=unescape(fragment.text)));return result}function fragQuote(fragment){if(fragment.done){return[fragment]}const quotesRe$1=quotesRe;let match;quotesRe$1.lastIndex=0;while(true){match=quotesRe$1.exec(fragment.text);if(!match){return[fragment]}if(match[0][0]==="\\"){quotesRe$1.lastIndex=match.index+match[1].length+1;continue}break}const result=[];const def=getDefinition$1(match[1]);while(fragment.text[quotesRe$1.lastIndex]===match[1][0]){match[2]+=match[1][0];quotesRe$1.lastIndex+=1}const before=match.input.slice(0,match.index);let quoted=match[2];const after=match.input.slice(quotesRe$1.lastIndex);result.push({text:before,done:false});result.push({text:def.openTag,done:true});if(!def.spans){quoted=replaceSpecialChars(quoted);quoted=quoted.replace(/\u0000/g,"");result.push({text:quoted,done:true})}else{result.push.apply(result,fragQuote({text:quoted,done:false}))}result.push({text:def.closeTag,done:true});result.push.apply(result,fragQuote({text:after,done:false}));return result}let savedReplacements;function preReplacements(text){savedReplacements=[];const fragments=fragReplacements([{text:text,done:false}]);return fragments.reduce(((result,fragment)=>{if(fragment.done){savedReplacements.push(fragment);return result+"\0"}else{return result+fragment.text}}),"")}function postReplacements(text){return text.replace(/[\u0000\u0001]/g,(function(match){const fragment=savedReplacements.shift();return match==="\0"?fragment.text:replaceSpecialChars(fragment.verbatim)}))}function fragReplacements(fragments){let result;defs$4.forEach((def=>{result=[];fragments.forEach((fragment=>{result.push.apply(result,fragReplacement(fragment,def))}));fragments=result}));return fragments}function fragReplacement(fragment,def){if(fragment.done){return[fragment]}const replacementRe=def.match;replacementRe.lastIndex=0;const match=replacementRe.exec(fragment.text);if(!match){return[fragment]}const result=[];const before=match.input.slice(0,match.index);const after=match.input.slice(replacementRe.lastIndex);result.push({text:before,done:false});let replacement;if(match[0][0]==="\\"){replacement=replaceSpecialChars(match[0].slice(1))}else{if(!def.filter){replacement=replaceMatch(match,def.replacement)}else{replacement=def.filter(match)}}result.push({text:replacement,done:true,verbatim:match[0]});result.push.apply(result,fragReplacement({text:after,done:false},def));return result}function fragSpecials(fragments){fragments.filter((fragment=>!fragment.done)).forEach((fragment=>fragment.text=replaceSpecialChars(fragment.text)))}function escapeRegExp(s){return s.replace(/[\-\/\\^$*+?.()|\[\]{}]/g,"\\$&")}function replaceSpecialChars(s){return s.replace(/&/g,"&amp;").replace(/>/g,"&gt;").replace(/</g,"&lt;")}function replaceMatch(match,replacement,expansionOptions={}){return replacement.replace(/(\${1,2})(\d)/g,(function(){if(arguments[1]==="$$"){expansionOptions.spans=true}else{expansionOptions.specials=true}const i=Number(arguments[2]);const result=match[i];if(result===undefined){errorCallback("undefined replacement group: "+arguments[0]);return""}return replaceInline(result,expansionOptions)}))}function copy(source){const result={};for(const key in source){if(Object.prototype.hasOwnProperty.call(source,key)){result[key]=source[key]}}return result}function merge(target,source){for(const key in source){target[key]=source[key]}}function replaceInline(text,expansionOptions){if(expansionOptions.macros){text=render$5(text)}if(expansionOptions.spans){text=render$6(text)}else if(expansionOptions.specials){text=replaceSpecialChars(text)}return text}var BlockAttributes;(function(BlockAttributes){let ids;function init(){BlockAttributes.classes="";BlockAttributes.id="";BlockAttributes.css="";BlockAttributes.attributes="";BlockAttributes.options={};ids=[]}BlockAttributes.init=init;function parse(match){let text=match[0];text=replaceInline(text,{macros:true});let m=/^\\?\.((?:\s*[a-zA-Z][\w\-]*)+)*(?:\s*)?(#[a-zA-Z][\w\-]*\s*)?(?:\s*)?(?:"(.+?)")?(?:\s*)?(\[.+])?(?:\s*)?([+-][ \w+-]+)?$/.exec(text);if(!m){return false}if(!skipBlockAttributes()){if(m[1]){BlockAttributes.classes+=" "+m[1].trim();BlockAttributes.classes=BlockAttributes.classes.trim()}if(m[2]){BlockAttributes.id=m[2].trim().slice(1)}if(m[3]){if(BlockAttributes.css&&BlockAttributes.css.substr(-1)!==";")BlockAttributes.css+=";";BlockAttributes.css+=" "+m[3].trim();BlockAttributes.css=BlockAttributes.css.trim()}if(m[4]&&!isSafeModeNz()){BlockAttributes.attributes+=" "+m[4].slice(1,m[4].length-1).trim();BlockAttributes.attributes=BlockAttributes.attributes.trim()}setBlockOptions(BlockAttributes.options,m[5])}return true}BlockAttributes.parse=parse;function inject(tag,consume=true){if(!tag){return tag}let attrs="";if(BlockAttributes.classes){let re=/^(<[^>]*class=")(.*?)"/i;if(re.test(tag)){tag=tag.replace(re,`$1${BlockAttributes.classes} $2"`)}else{attrs=`class="${BlockAttributes.classes}"`}}if(BlockAttributes.id){BlockAttributes.id=BlockAttributes.id.toLowerCase();let hasId=/^<[^<]*id=".*?"/i.test(tag);if(hasId||ids.indexOf(BlockAttributes.id)>-1){errorCallback(`duplicate 'id' attribute: ${BlockAttributes.id}`)}else{ids.push(BlockAttributes.id)}if(!hasId){attrs+=` id="${BlockAttributes.id}"`}}if(BlockAttributes.css){let re=/^(<[^>]*style=")(.*?)"/i;if(re.test(tag)){tag=tag.replace(re,(function(match,p1,p2){p2=p2.trim();if(p2&&p2.substr(-1)!==";")p2+=";";return`${p1}${p2} ${BlockAttributes.css}"`}))}else{attrs+=` style="${BlockAttributes.css}"`}}if(BlockAttributes.attributes){attrs+=" "+BlockAttributes.attributes}attrs=attrs.trim();if(attrs){let match=tag.match(/^<([a-zA-Z]+|h[1-6])(?=[ >])/);if(match){let before=tag.slice(0,match[0].length);let after=tag.slice(match[0].length);tag=before+" "+attrs+after}}if(consume){BlockAttributes.classes="";BlockAttributes.id="";BlockAttributes.css="";BlockAttributes.attributes=""}return tag}BlockAttributes.inject=inject;function slugify(text){let slug=text.replace(/\W+/g,"-").replace(/-+/g,"-").replace(/(^-)|(-$)/g,"").toLowerCase();if(!slug)slug="x";if(ids.indexOf(slug)>-1){let i=2;while(ids.indexOf(slug+"-"+i)>-1){i++}slug+="-"+i}return slug}BlockAttributes.slugify=slugify})(BlockAttributes||(BlockAttributes={}));let safeMode;let htmlReplacement;let callback;function init$3(){safeMode=0;htmlReplacement="<mark>replaced HTML</mark>";callback=undefined}function isSafeModeNz(){return safeMode!==0}function skipMacroDefs(){return safeMode!==0&&(safeMode&8)===0}function skipBlockAttributes(){return(safeMode&4)!==0}function setSafeMode(value){const n=Number(value);if(isNaN(n)||n<0||n>15){errorCallback("illegal safeMode API option value: "+value);return}safeMode=n}function setHtmlReplacement(value){if(value===undefined)return;htmlReplacement=value}function setReset(value){if(value===false||value==="false"){return}else if(value===true||value==="true"){init()}else{errorCallback("illegal reset API option value: "+value)}}function updateOptions(options){for(const key in options){switch(key){case"reset":case"safeMode":case"htmlReplacement":case"callback":break;default:errorCallback("illegal API option name: "+key);return}}if("callback"in options)callback=options.callback;if("reset"in options)setReset(options.reset);if("callback"in options)callback=options.callback;if("safeMode"in options)setSafeMode(options.safeMode);if("htmlReplacement"in options){setHtmlReplacement(options.htmlReplacement)}}function setOption(name,value){const option={};option[name]=value;updateOptions(option)}function htmlSafeModeFilter(html){switch(safeMode&3){case 0:return html;case 1:return"";case 2:return htmlReplacement;case 3:return replaceSpecialChars(html);default:return""}}function errorCallback(message){if(callback){callback({type:"error",text:message})}}function panic(message){const msg="panic: "+message;console.error(msg);errorCallback(msg)}const MATCH_LINE=/^({(?:[\w\-]+)(?:[!=|?](?:|.*?[^\\]))?}).*$/;const LINE_DEF=/^\\?{([\w\-]+\??)}\s*=\s*(['`])(.*)\2$/;const LITERAL_DEF_OPEN=/^\\?{[\w\-]+\??}\s*=\s*'(.*)$/;const LITERAL_DEF_CLOSE=/^(.*)'$/;const EXPRESSION_DEF_OPEN=/^\\?{[\w\-]+\??}\s*=\s*`(.*)$/;const EXPRESSION_DEF_CLOSE=/^(.*)`$/;let defs$3=[];function init$2(){defs$3=[{name:"--",value:""},{name:"--header-ids",value:""}]}function getValue(name){for(const def of defs$3){if(def.name===name){return def.value}}return null}function setValue(name,value,quote){if(skipMacroDefs()){return}let existential=false;if(name.slice(-1)==="?"){name=name.slice(0,-1);existential=true}if(name==="--"&&value!==""){errorCallback("the predefined blank '--' macro cannot be redefined");return}if(quote==="`"){try{value=eval(value)}catch(e){errorCallback(`illegal macro expression: ${e.message}: ${value}`)}}for(const def of defs$3){if(def.name===name){if(!existential){def.value=value}return}}defs$3.push({name:name,value:value})}function render$5(text,silent=false){const MATCH_COMPLEX=/\\?{([\w\-]+)([!=|?](?:|[^]*?[^\\]))}/g;const MATCH_SIMPLE=/\\?{([\w\-]+)()}/g;let result=text;[MATCH_SIMPLE,MATCH_COMPLEX].forEach((find=>{result=result.replace(find,(function(match,...submatches){if(match[0]==="\\"){return match.slice(1)}const name=submatches[0];let params=submatches[1]||"";if(params[0]==="?"){if(!silent){errorCallback("existential macro invocations are deprecated: "+match)}return match}let value=getValue(name);if(value===null){if(!silent){errorCallback("undefined macro: "+match+": "+text)}return match}if(find===MATCH_SIMPLE){return value}params=params.replace(/\\}/g,"}");switch(params[0]){case"|":const paramsList=params.slice(1).split("|");const PARAM_RE=/\\?(\$\$?)(\d+)(\\?:(|[^]*?[^\\])\$)?/g;value=(value||"").replace(PARAM_RE,(function(match,p1,p2,p3,p4){if(match[0]==="\\"){return match.slice(1)}if(Number(p2)===0){return match}let param=paramsList[Number(p2)-1];param=param===undefined?"":param;if(p3!==undefined){if(p3[0]==="\\"){param+=p3.slice(1)}else{if(param===""){param=p4;param=param.replace(/\\\$/g,"$")}}}if(p1==="$$"){param=render$6(param)}return param}));return value;case"!":case"=":const pattern=params.slice(1);let skip=false;try{skip=!RegExp("^"+pattern+"$").test(value||"")}catch(_a){if(!silent){errorCallback("illegal macro regular expression: "+pattern+": "+text)}return match}if(params[0]==="!"){skip=!skip}return skip?"":"";default:errorCallback("illegal macro syntax: "+match[0]);return""}}))}));if(result.indexOf("")!==-1){result=result.split("\n").filter((line=>line.indexOf("")===-1)).join("\n")}return result}const MATCH_INLINE_TAG=/^(a|abbr|acronym|address|b|bdi|bdo|big|blockquote|br|cite|code|del|dfn|em|i|img|ins|kbd|mark|q|s|samp|small|span|strike|strong|sub|sup|time|tt|u|var|wbr)$/i;let defs$2;const DEFAULT_DEFS=[{openMatch:LITERAL_DEF_OPEN,closeMatch:LITERAL_DEF_CLOSE,openTag:"",closeTag:"",expansionOptions:{macros:true},delimiterFilter:delimiterFilter1,contentFilter:macroDefContentFilter},{openMatch:EXPRESSION_DEF_OPEN,closeMatch:EXPRESSION_DEF_CLOSE,openTag:"",closeTag:"",expansionOptions:{macros:true},delimiterFilter:delimiterFilter1,contentFilter:macroDefContentFilter},{name:"comment",openMatch:/^\\?\/\*+$/,closeMatch:/^\*+\/$/,openTag:"",closeTag:"",expansionOptions:{skip:true,specials:true}},{name:"division",openMatch:/^\\?(\.{2,})([\w\s-]*)$/,openTag:"<div>",closeTag:"</div>",expansionOptions:{container:true,specials:true},delimiterFilter:delimiterFilter2},{name:"quote",openMatch:/^\\?("{2,})([\w\s-]*)$/,openTag:"<blockquote>",closeTag:"</blockquote>",expansionOptions:{container:true,specials:true},delimiterFilter:delimiterFilter2},{name:"details",openMatch:/^\\?(>{2,})\s*(.*)$/,openTag:"<details>",closeTag:"</details>",expansionOptions:{container:true,specials:true},delimiterFilter:delimiterFilter2},{name:"code",openMatch:/^\\?(-{2,}|`{2,})([\w\s-]*)$/,openTag:"<pre><code>",closeTag:"</code></pre>",expansionOptions:{macros:false,specials:true},verify:function(match){return!(match[1][0]==="-"&&match[2].trim()!=="")},delimiterFilter:delimiterFilter2},{name:"html",openMatch:/^(<!--.*|<!DOCTYPE(?:\s.*)?|<\/?([a-z][a-z0-9]*)(?:[\s>].*)?)$/i,closeMatch:/^$/,openTag:"",closeTag:"",expansionOptions:{macros:true},verify:function(match){if(match[2]){return!MATCH_INLINE_TAG.test(match[2])}else{return true}},delimiterFilter:delimiterFilter1,contentFilter:htmlSafeModeFilter},{name:"indented",openMatch:/^\\?(\s+\S.*)$/,closeMatch:/^$/,openTag:"<pre><code>",closeTag:"</code></pre>",expansionOptions:{macros:false,specials:true},delimiterFilter:delimiterFilter1,contentFilter:function(text){const firstIndent=text.search(/\S/);return text.split("\n").map((line=>{let indent=line.search(/\S|$/);if(indent>firstIndent)indent=firstIndent;return line.slice(indent)})).join("\n")}},{name:"quote-paragraph",openMatch:/^\\?(>[^>].*)$/,closeMatch:/^$/,openTag:"<blockquote><p>",closeTag:"</p></blockquote>",expansionOptions:{macros:true,spans:true,specials:true},delimiterFilter:delimiterFilter1,contentFilter:function(text){return text.split("\n").map((line=>line.replace(/^>/,"").replace(/^\\>/,">"))).join("\n")}},{name:"paragraph",openMatch:/(.*)/,closeMatch:/^$/,openTag:"<p>",closeTag:"</p>",expansionOptions:{macros:true,spans:true,specials:true},delimiterFilter:delimiterFilter1}];function init$1(){defs$2=DEFAULT_DEFS.map((def=>copy(def)));defs$2.forEach(((def,i)=>def.expansionOptions=copy(DEFAULT_DEFS[i].expansionOptions)))}function render$4(reader,writer,allowed=[]){if(reader.eof())panic("premature eof");for(const def of defs$2){if(allowed.length>0&&allowed.indexOf(def.name?def.name:"")===-1){continue}const match=reader.cursor.match(def.openMatch);if(match){if(match[0][0]==="\\"&&def.name!=="paragraph"){reader.cursor=reader.cursor.slice(1);continue}if(def.verify&&!def.verify(match)){continue}const delimiterText=def.delimiterFilter?def.delimiterFilter(match):"";let lines=[];if(delimiterText){lines.push(delimiterText)}reader.next();const content=reader.readTo(def.closeMatch);if(content===null){errorCallback("unterminated delimited block: "+match[0])}if(content){lines=[...lines,...content]}const expansionOptions={macros:false,spans:false,specials:false,container:false,skip:false};merge(expansionOptions,def.expansionOptions);merge(expansionOptions,BlockAttributes.options);if(!expansionOptions.skip){let text=lines.join("\n");if(def.contentFilter){text=def.contentFilter(text,match,expansionOptions)}let opentag=def.openTag;if(def.name==="html"){text=BlockAttributes.inject(text)}else{opentag=BlockAttributes.inject(opentag)}if(expansionOptions.container){delete BlockAttributes.options.container;text=render$1(text)}else{text=replaceInline(text,expansionOptions)}let closetag=def.closeTag;if(def.name==="division"&&opentag==="<div>"){opentag="";closetag=""}writer.write(opentag);writer.write(text);writer.write(closetag);if((opentag||text||closetag)&&!reader.eof()){writer.write("\n")}}BlockAttributes.options={};return true}}return false}function getDefinition(name){return defs$2.filter((def=>def.name===name))[0]}function setBlockOptions(blockOptions,optionsString){if(optionsString){const opts=optionsString.trim().split(/\s+/);for(const opt of opts){if(isSafeModeNz()&&opt==="-specials"){errorCallback("-specials block option not valid in safeMode");continue}if(/^[+-](macros|spans|specials|container|skip)$/.test(opt)){blockOptions[opt.slice(1)]=opt[0]==="+"}else{errorCallback("illegal block option: "+opt)}}}}function setDefinition(name,value){const def=getDefinition(name);if(!def){errorCallback("illegal delimited block name: "+name+": |"+name+"|='"+value+"'");return}const match=value.trim().match(/^(?:(<[a-zA-Z].*>)\|(<[a-zA-Z/].*>))?(?:\s*)?([+-][ \w+-]+)?$/);if(match===null){errorCallback("illegal delimited block definition: |"+name+"|='"+value+"'");return}if(match[1]){def.openTag=match[1];def.closeTag=match[2]}if(match[3]){setBlockOptions(def.expansionOptions,match[3])}}function delimiterFilter1(match){return match[1]}function delimiterFilter2(match){let result="";if(match[2]){if(this.name==="details"){const summary=replaceInline(match[2],{macros:true,spans:true});result=`<summary>${summary}</summary>\n`}else{let p1;if(p1=match[2].trim()){BlockAttributes.classes=p1}}}this.closeMatch=RegExp("^"+escapeRegExp(match[1])+"$");return result}function macroDefContentFilter(text,match,expansionOptions){const quote=match[0][match[0].length-match[1].length-1];const name=match[0].match(/^{([\w\-]+\??)}/)[1];text=text.replace(RegExp("("+quote+") *\\\\\\n","g"),"$1\n");text=text.replace(RegExp("("+quote+" *[\\\\]+)\\\\\\n","g"),"$1\n");text=replaceInline(text,expansionOptions);setValue(name,text,quote);return""}class Reader{constructor(text){text=text.replace("\0"," ");text=text.replace(""," ");text=text.replace(""," ");this.lines=text.split(/\r\n|\r|\n/g);this.pos=0}get cursor(){console.assert(!this.eof());return this.lines[this.pos]}set cursor(value){console.assert(!this.eof());this.lines[this.pos]=value}eof(){return this.pos>=this.lines.length}next(){if(!this.eof())this.pos++}readTo(find){const result=[];let match=null;while(!this.eof()){match=this.cursor.match(find);if(match){if(match[1]!==undefined){result.push(match[1])}this.next();break}result.push(this.cursor);this.next()}if(match||find.toString()==="/^$/"&&this.eof()){return result}else{return null}}skipBlankLines(){while(!this.eof()&&this.cursor.trim()===""){this.next()}}}class Writer{constructor(){this.buffer=[]}write(s){this.buffer.push(s)}toString(){return this.buffer.join("")}}const defs$1=[{match:/^\\?\/{2}(.*)$/},{match:MATCH_LINE,verify:function(match,reader){if(LITERAL_DEF_OPEN.test(match[0])||EXPRESSION_DEF_OPEN.test(match[0])){return false}const value=render$5(match[0],true);if(value.substr(0,match[0].length)===match[0]||value.indexOf("\n"+match[0])>=0){return false}const spliceArgs=[reader.pos+1,0,...value.split("\n")];Array.prototype.splice.apply(reader.lines,spliceArgs);return true},filter:function(_match,_reader){return""}},{match:/^\\?\|([\w\-]+)\|\s*=\s*'(.*)'$/,filter:function(match){if(isSafeModeNz()){return""}match[2]=replaceInline(match[2],{macros:true});setDefinition(match[1],match[2]);return""}},{match:/^(\S{1,2})\s*=\s*'([^|]*)(\|{1,2})(.*)'$/,filter:function(match){if(isSafeModeNz()){return""}setDefinition$2({quote:match[1],openTag:replaceInline(match[2],{macros:true}),closeTag:replaceInline(match[4],{macros:true}),spans:match[3]==="|"});return""}},{match:/^\\?\/(.+)\/([igm]*)\s*=\s*'(.*)'$/,filter:function(match){if(isSafeModeNz()){return""}const pattern=match[1];const flags=match[2];let replacement=match[3];replacement=replaceInline(replacement,{macros:true});setDefinition$1(pattern,flags,replacement);return""}},{match:LINE_DEF,filter:function(match){const name=match[1];const quote=match[2];let value=match[3];value=replaceInline(value,{macros:true});setValue(name,value,quote);return""}},{match:/^\\?([#=]{1,6})\s+(.+?)(?:\s+\1)?$/,replacement:"<h$1>$$2</h$1>",filter:function(match){match[1]=match[1].length.toString();if(getValue("--header-ids")&&BlockAttributes.id===""){BlockAttributes.id=BlockAttributes.slugify(match[2])}return replaceMatch(match,this.replacement,{macros:true})}},{match:/^\\?<image:([^\s|]+)\|([^]+?)>$/,replacement:'<img src="$1" alt="$2">'},{match:/^\\?<image:([^\s|]+?)>$/,replacement:'<img src="$1" alt="$1">'},{match:/^\\?<<#([a-zA-Z][\w\-]*)>>$/,replacement:'<div id="$1"></div>',filter:function(match,_reader){if(skipBlockAttributes()){return""}else{return replaceMatch(match,this.replacement,{macros:true})}}},{name:"attributes",match:/^\\?\.[a-zA-Z#"\[+-].*$/,verify:function(match){return BlockAttributes.parse(match)}},{match:/^\\?\.(\w+)\s*=\s*'(.*)'$/,filter:function(match){if(!isSafeModeNz()){const value=replaceInline(match[2],{macros:true});setOption(match[1],value)}return""}}];function render$3(reader,writer,allowed=[]){if(reader.eof())panic("premature eof");for(const def of defs$1){if(allowed.length>0&&allowed.indexOf(def.name?def.name:"")===-1){continue}const match=def.match.exec(reader.cursor);if(match){if(match[0][0]==="\\"){reader.cursor=reader.cursor.slice(1);continue}if(def.verify&&!def.verify(match,reader)){continue}let text;if(!def.filter){text=def.replacement?replaceMatch(match,def.replacement,{macros:true}):""}else{text=def.filter(match,reader)}if(text){text=BlockAttributes.inject(text);writer.write(text);reader.next();if(!reader.eof()){writer.write("\n")}}else{reader.next()}return true}}return false}const defs=[{match:/^\\?\s*(-|\+|\*{1,4})\s+(.*)$/,listOpenTag:"<ul>",listCloseTag:"</ul>",itemOpenTag:"<li>",itemCloseTag:"</li>"},{match:/^\\?\s*(?:\d*)(\.{1,4})\s+(.*)$/,listOpenTag:"<ol>",listCloseTag:"</ol>",itemOpenTag:"<li>",itemCloseTag:"</li>"},{match:/^\\?\s*(.*[^:])(:{2,4})(|\s+.*)$/,listOpenTag:"<dl>",listCloseTag:"</dl>",itemOpenTag:"<dd>",itemCloseTag:"</dd>",termOpenTag:"<dt>",termCloseTag:"</dt>"}];let ids;function render$2(reader,writer){if(reader.eof())panic("premature eof");let startItem;if(!(startItem=matchItem(reader))){return false}ids=[];renderList(startItem,reader,writer);if(ids.length!==0)panic("list stack failure");return true}function renderList(item,reader,writer){ids.push(item.id);writer.write(BlockAttributes.inject(item.def.listOpenTag));let nextItem;while(true){nextItem=renderListItem(item,reader,writer);if(!nextItem||nextItem.id!==item.id){writer.write(item.def.listCloseTag);ids.pop();return nextItem}item=nextItem}}function renderListItem(item,reader,writer){const def=item.def;const match=item.match;let text;if(match.length===4){writer.write(BlockAttributes.inject(def.termOpenTag,false));BlockAttributes.id="";text=replaceInline(match[1],{macros:true,spans:true});writer.write(text);writer.write(def.termCloseTag)}writer.write(BlockAttributes.inject(def.itemOpenTag));const itemLines=new Writer;text=match[match.length-1];itemLines.write(text+"\n");reader.next();const attachedLines=new Writer;let blankLines;let attachedDone=false;let nextItem;while(true){blankLines=consumeBlockAttributes(reader,attachedLines);if(blankLines>=2||blankLines===-1){nextItem=null;break}nextItem=matchItem(reader);if(nextItem){if(ids.indexOf(nextItem.id)!==-1);else{nextItem=renderList(nextItem,reader,attachedLines)}break}if(attachedDone){break}if(blankLines===0){const savedIds=ids;ids=[];if(render$4(reader,attachedLines,["comment","code","details","division","html","quote"])){attachedDone=true}else{itemLines.write(reader.cursor+"\n");reader.next()}ids=savedIds}else if(blankLines===1){if(render$4(reader,attachedLines,["indented","quote-paragraph"])){attachedDone=true}else{break}}}text=itemLines.toString().trim();text=replaceInline(text,{macros:true,spans:true});writer.write(text);writer.buffer=[...writer.buffer,...attachedLines.buffer];writer.write(def.itemCloseTag);return nextItem}function consumeBlockAttributes(reader,writer){let blanks=0;while(true){if(reader.eof()){return-1}if(render$3(reader,writer,["attributes"])){continue}if(reader.cursor!==""){return blanks}blanks++;reader.next()}}function matchItem(reader){if(reader.eof())return null;const item={};for(const def of defs){const match=def.match.exec(reader.cursor);if(match){if(match[0][0]==="\\"){reader.cursor=reader.cursor.slice(1);return null}item.match=match;item.def=def;item.id=match[match.length-2];return item}}return null}function render$1(source){const reader=new Reader(source);const writer=new Writer;while(!reader.eof()){reader.skipBlankLines();if(reader.eof())break;if(render$3(reader,writer))continue;if(render$2(reader,writer))continue;if(render$4(reader,writer))continue;panic("no matching delimited block found")}return writer.toString()}function init(){BlockAttributes.init();init$3();init$1();init$2();init$5();init$4()}function render(source,opts={}){updateOptions(opts);return render$1(source)}init();export{render};